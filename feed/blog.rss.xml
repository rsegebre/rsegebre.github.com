<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rsegebre</title><link>http://rsegebre.com/</link><description></description><atom:link href="http://rsegebre.com/feed/blog.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 20 Oct 2013 00:00:00 -0400</lastBuildDate><item><title>A world without DNS</title><link>http://rsegebre.com/a-world-without-dns.html</link><description>&lt;p&gt;Have you ever tried remembering an IP address /32? How many (non-squential) can you remember? For how many days! These questions always torment me everytime I can't get DNS to work on a new host or I am trying to reach a subset of hosts that were just created and have no DNS entries ( yeah, no DHCP). DNS is such an important part of our lives and it is a given for most people (except for non-techies) that I don't think many people realize how dependent we've become on it. Now imagine a DNS apocalypse, DNS servers across the world are broken and the only way to address websites now is through IP addresses and it was up to you to save the world! Every public and internal DNS server in the world died. What would you do?&lt;/p&gt;
&lt;p&gt;Well, I can think of a quick fix... When I was in college we built a very small DNS server that was pretty much as a cache to store IP addresses and request lookups to a real DNS server if it didn't find it. All you had to do was point your browser to the local DNS server and keep it running. We would just need a very reliable source to obtain all of our new information, or have a way of of obtaining all of our new DNS data and a purely decentralized way, without any authoritative servers telling our private local DNS cache who owns what domain.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;This gives room to the concept of a purely decentralized DNS network in which we could pretty much update our small local DNS based on asking our peers, &amp;quot;Hey, Bob do you know the IP for johnnnies.com?&amp;quot;. If Bob says yes, then he shares it to you if Bob doesn't have it you can ask another peer in your network or have Bob ask some of his neighbors. Limiting the type of requests to two so far, (1) can I get an IP for url x? (2) can you ask your neighbors for URL x?. The main reason for (2) being that we probably want to avoid flooding the network if we just automatically ask all of our peers as soon as we get ask question (1) and we don't know the answer. This of course is starting to lead to a billion other questions, such as trust, discovery mechanisms, security and other topics of interest. When researching this idea I came across an initiative that seemed pretty interested called &lt;a class="reference external" href="http://www.hacker10.com/tag/oddns-review/"&gt;ODDNS&lt;/a&gt;, which came as a way to prevent censorship and allowing people to manage their own domains, whic&lt;/dt&gt;
&lt;dd&gt;h of coursed probably generated a lot of opposition... :( so I think the initiative died out, but my guess is that is was probably terminated by external parties.&lt;/dd&gt;
&lt;dt&gt;The main problem I can think of is trust, how do you know that the data your peer provided is valid? It would be really hard to establish who is the owner of a domain or subdomain without an authoritative name server as it currently works, which is were a lot of corporations and governments exert their authority by filtering out unwanted domains and censoring content. So if we were to think of how to trust the results of a peer I would say that we should rely on the peer-to-peer nature of the network and ask multiple neighbors and then compare results. We could also have a authority function for each peer that depends on your previous interactions, number of direct hits (peer you asked knows the answer without asking any other peers) and data validation with other peers. Far from ever receiving 100% accurate data as long as you can minimize the risk of obtaining false or malicious data (man-in-the-middle or redirection attacks), we could have a DNS replacement systems that works most&lt;/dt&gt;
&lt;dd&gt;of the time and is stable enough to be usable. Yet having a market for this information or a super-peer that provides data and has a very high ranking authority seems unavoidable, specially if it is a known authority (ie Google, Microsoft, etc). This super-peer can be any authority as voted by the majority of the other peers, which makes me think that this alternative DNS network would eventually transform into a centralized-descentralized network but at least it would leave the opportunity for new peers to come and go and chose who to trust, making super-peers only as authoritative as other peers allow them to, not to mention that this might decrease government censorship.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;What other alternate ways do you think we can create a DNS replacement&lt;/p&gt;
&lt;p&gt;~rs&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Segebre</dc:creator><pubDate>Sun, 20 Oct 2013 00:00:00 -0400</pubDate><guid>tag:rsegebre.com,2013-10-20:a-world-without-dns.html</guid><category>blog</category><category>DNS</category></item><item><title>Open Source Projects</title><link>http://rsegebre.com/open-source-projects.html</link><description>&lt;p&gt;Last year I joined Code for Boston, a local spin-off of the bigger Code for America (CfA) group, when it was barely starting in Boston trying to get off the ground. After a somewhat rought start, trying to find a place for our meetups every week, the group leader did a good job at finding a nice place to hold a weekly meeting. We finally starting getting down to projects. After much discussion and multiple projects, finally settled down on one called Urbanite. This project was originally developed during a hackathon by the group leader and some of his friends, we liked the concept a lot and pushed somewhat further in terms of scope and we wanted out of it. It turned into a bigger project than we imagined. It transformed into something way more complicated than I had ever worked on, let alone anything that I had ever tried leading or taking a big role on. After multiple discussions we had originally settled with Ruby as the main framework for Urbanite, but the more people me and the other person leading the project talked to the harder it became to choose anything and be 100% sure that we were making the right choice. After a couple of months we settled with Ruby on Rails and MongoDB on the backend and a angular.js frontend.&lt;/p&gt;
&lt;p&gt;At the beginning I was mostly focused on creating a self-sustainable open-source project on GitHub, so that people could freely contribute without having much of a background on the entire project and its history. Yet not knowing Rails, or any of the other technologies proved to be a challenge that made it really hard to stay focused, this and full-time work on top took a lot of the eagerness I usually have for being entertained in such projects. That and Visa Season creeped up from behind taking even more time. But finally after being done with all of that, and buying a little extra time, I think I finally ready to keep pushing on Urbanite until I can see its completion. Specially since we now have a couple of stable collaborators that have provided the expertise and knowledge to move on. Plus the enormous task of keeping the project alive for this last month.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Urbanite &amp;lt;https://github.com/codeforboston/urbanite&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;~rs_&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Segebre</dc:creator><pubDate>Mon, 10 Jun 2013 00:00:00 -0400</pubDate><guid>tag:rsegebre.com,2013-06-10:open-source-projects.html</guid><category>blog</category><category>Projects</category></item><item><title>"real-life"?</title><link>http://rsegebre.com/real-life.html</link><description>&lt;p&gt;It has been over 5 months or so since I've written a post, but there has been quite a lot of events recently. In particular, joining the worforce, renting an apartment as a alien (the legal status), waking-up early and trying to just find a rhythm in life. Well I figured now that I am little more settled in life and finally have a bed to sleep in, I figured I should start trying to find some side projects or groups to join that will help me foster my coding skills, since they are recently starting to get somewhat rusty. I am working as a sysadmin and because there is some scripting involved I still remember how to code basic things. Well I would say my Python skills have expanded a lil bit more :) . Anyways, I simply wanted to announce that I would be more involved in my blog and some projects that people might find interesting.For example: I've acquired quite a interest in Nagios which is a pretty sweet monitoring solution that I learned about at work; also I joined the group Code for Boston which is the Boston instance of the US wide Code for America group, we are still trying to get started and my involved hasn't been that big but I plan on being more involved this year.&lt;/p&gt;
&lt;p&gt;~rs&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Segebre</dc:creator><pubDate>Fri, 04 Jan 2013 00:00:00 -0500</pubDate><guid>tag:rsegebre.com,2013-01-04:real-life.html</guid><category>blog</category><category>real-life</category><category>personal</category></item><item><title>Debugging thru life</title><link>http://rsegebre.com/debugging-thru-life.html</link><description>&lt;p&gt;Interesting quote from Dijkstra (ring a bell?):&lt;/p&gt;
&lt;p&gt;&amp;quot;If debugging is the process of removing bugs, then programming must be the process of putting them in.&amp;quot;
Edsger Dijkstra&lt;/p&gt;
&lt;p&gt;I was listening to a podcast about &lt;a class="reference external" href="http://www.thisdeveloperslife.com/post/1-0-3-problems"&gt;problem solving&lt;/a&gt; in relation to programming and related to various aspects in life. At some point during the podcast I asked myself, &amp;quot;How do I debug? What is the thought process (if any) when I encounter a bug.&amp;quot;&lt;/p&gt;
&lt;p&gt;This made me realize that, sadly enough, I never had a systematic way of approaching a bug. This seemed a terrible realization at first, but later I proceeded to rationalize this finding. Most of the projects I've worked, are small enough that debugging is trivial to some extent. Running my code against test cases seemed foolish, especially when the entire program is about 300 lines or so in most projects in college. Short programs along with one of the first things I learned about programming, to test your code as you go. This means that I am used to writing code that can be executed at any time along with some sort of documentation during the process. (1) Small programs and (2) testing as you go has reduced the need of developing better debugging skills in my four years programming.&lt;/p&gt;
&lt;p&gt;But as a lab tutor for some computer science courses I've had to look at other peoples code and the worst mistakes I've seen are to write all your code without ever running any of it, then debugging it all at once. Two reasons I would never recommend this are: (1) Initial bugs can be very costly later on in your code and make the rest of your code useless once initial bugs are fixed. (2) It is harder to debug all your code at once. Think about it, you just finished implementing a tricky algorithm, about 300 to 400 lines of code, it took you a good 3 hours of coding plus a couple more figuring out the algorithm, the deadline is coming soon. The last thing you would want to do is spend twice that time debugging your code. This scenario might be unrealistic for many of you, but it is probably true for most college students.&lt;/p&gt;
&lt;p&gt;So what would be a good debugging process for college-type programming assignments? I would say that a good bug-avoiding-style / defensive programming style, this means that you should (1) think of the layout or algorithm you are going use, write some pseudocode or draw a diagram anything that helps you organize your thoughts on how to solve the current problem at hand. Programming without thinking is one of the biggest mistakes that will probably yield an incorrect program or if it works a lot of bugs. (2) Test your code in small portions, gradual and incremental debugging. This means that for example, for every 30 minutes of coding you do take other 30 minutes debugging, or some time scheme that helps reminds you to debug constantly and not procrastinate. Also after you've tried fixing a bug and you know the program logic isn't incorrect, you can always ask for support in &lt;a class="reference external" href="http://stackoverflow.com/"&gt;stack overflow&lt;/a&gt;, it is very likely that your question (or similar) has already been asked/answered.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Segebre</dc:creator><pubDate>Sat, 14 Jul 2012 00:00:00 -0400</pubDate><guid>tag:rsegebre.com,2012-07-14:debugging-thru-life.html</guid><category>blog</category><category>debugging</category></item><item><title>Deviruchi Website</title><link>http://rsegebre.com/deviruchi-website.html</link><description>&lt;p&gt;One of my projects for my networks class was to build a website from scratch, in which we had to showcase the basics: html/css/javascript. So I built a simple website using a &lt;a class="reference external" href="http://css-tricks.com/snippets/jquery/smooth-scrolling/"&gt;smoothscroll javascript&lt;/a&gt; I found and &lt;a class="reference external" href="http://spritely.net/"&gt;spritely&lt;/a&gt; (a jQuery based sprite animation library to animate the little devil, called Deviruchi, from &lt;a class="reference external" href="http://www.ragnarokonline.com/"&gt;Ragnarok Online&lt;/a&gt; ). Besides the javascript, I also wrote the css and the html for the website as well as designed I guess (now it makes sense why it looks funky!), obtained most of the graphics from  a &lt;a class="reference external" href="http://www.freevectorlibrary.com/"&gt;free vector library&lt;/a&gt; and modified them.&lt;/p&gt;
&lt;p&gt;So you can check it out here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://rsegebre.com/static/sample_website"&gt;Deviruchi Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To check out the code behind it check out my github account (rsegebre.github.com/static/sample_website/).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Segebre</dc:creator><pubDate>Sat, 14 Jul 2012 00:00:00 -0400</pubDate><guid>tag:rsegebre.com,2012-07-14:deviruchi-website.html</guid><category>blog</category><category>website</category><category>college</category><category>deviruchi</category></item><item><title>Setting up your github website</title><link>http://rsegebre.com/setting-up-your-github-website.html</link><description>&lt;p&gt;I said in my first post that I was going to post a guide on how to set-up your own website using &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;pelican&lt;/a&gt; and &lt;a class="reference external" href="http://www.github.com"&gt;github&lt;/a&gt; from a Linux environment.&lt;/p&gt;
&lt;div class="section" id="environment"&gt;
&lt;h2&gt;Environment:&lt;/h2&gt;
&lt;p&gt;So if you are not already running Linux in your laptop, then you have some options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install Linux on a virtual machine:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I recommend using &lt;a class="reference external" href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;, it is a free and simple to use. Simply &lt;a class="reference external" href="https://www.virtualbox.org/wiki/Downloads"&gt;download&lt;/a&gt; the respective package for your current OS and install it, very simply click and install process. But if you have any issues leave a comment below or just refer to the &lt;a class="reference external" href="https://www.virtualbox.org/manual/ch02.html#installation_windows"&gt;installation documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;After you install VirtualBox you can download any version of Linux:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For users that are not used to the Linux shell simply download the &lt;a class="reference external" href="http://www.ubuntu.com/download/desktop"&gt;desktop version&lt;/a&gt; of Ubuntu, one of the various flavors of Linux.&lt;/li&gt;
&lt;li&gt;For more advanced users you can download the &lt;a class="reference external" href="http://www.ubuntu.com/download/server"&gt;server version&lt;/a&gt; of Ubuntu. It doesn't have a GUI or any of the extra graphic packages that come with the desktop version.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;After downloading the version of Ubuntu that you want to use, proceed to starting your VirtualBox software and simply clicking on the &lt;em&gt;new&lt;/em&gt; button in order to create a new virtual machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Then simply follow the steps indicated by the VirtualBox Wizard. You give your machine any name, but for operating system you must choose Linux and then the corresponding version of Ubuntu (32 bit or 64 bit, whichever you downloaded).&lt;/li&gt;
&lt;li&gt;If you are only going to use this virtual machine for publishing to your website, then I recommend using 512 MB of RAM and a new hard disk of 4 GB using VDI, Dynamically allocated. Pretty much the default settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Then after we finish creating the new virtual machine you can simply select it and click on start, to power up the machine. When you do so a new wizard will show up asking you to select an image. In here you have to select the version of Ubuntu you downloaded and hit next. Then simply follow the installation procedure for Ubuntu which should take about 5-10 min. You can leave the default setting on pretty much anything. (If you have issues installing Ubuntu on your Virtual Machine leave a comment or refer to the &lt;a class="reference external" href="https://help.ubuntu.com/12.04/installation-guide/i386/d-i-intro.html"&gt;documentation here&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;So after you are done installing Ubuntu fire up the almighty Linux shell and you are ready to move on the next part.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Install Linux in your laptop:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I will not go over all the details, since this can be a more gruesome process or in some cases simpler! Regardless of which path you choose to follow try to refer to the official documentation first.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Click on your current OS: { &lt;a class="reference external" href="https://help.ubuntu.com/community/Installation"&gt;Windows&lt;/a&gt; | &lt;a class="reference external" href="http://www.ubuntu.com/download/help/create-a-usb-stick-on-mac-osx"&gt;Mac OS&lt;/a&gt; }&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-pelican"&gt;
&lt;h2&gt;Installing Pelican:&lt;/h2&gt;
&lt;p&gt;Kudos if you made it here, or even if you simply scrolled down here. Believe me, installing Pelican is as straightforward as it gets. Once you are inside your beloved Linux shell simply type:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo pip install pelican
&lt;/pre&gt;
&lt;p&gt;But don't worry if the above didn't work. If the above statement threw some sort of error, then you need to check a couple of things first:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Is Python 2.7 installed? Run the following command to find out:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python -V
&lt;/pre&gt;
&lt;p&gt;and you should get:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ Python 2.7.3
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;If you get command not found or other error message it means you probably do not have python installed so you can install by running the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ apt-get install python
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now we have to install &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/installing.html#"&gt;pip&lt;/a&gt; to make our lives a little better. To do this run the following commands:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ wget http://pypi.python.org/packages/source/p/pip/pip-1.0.tar.gz
$ tar xvfz pip-1.0.tar.gz
$ cd pip-1.0/
$ python setup.py install
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;If you have any other version of python installed then you have to install the python package &lt;a class="reference external" href="http://pypi.python.org/pypi/argparse/"&gt;argparse&lt;/a&gt;, which you can install by running the command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install argparse
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Without further ado we shall &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/getting_started.html"&gt;install pelican&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install pelican
&lt;/pre&gt;
&lt;p&gt;Done installing stuff... kind of.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="github-and-pelican-free-hosting"&gt;
&lt;h2&gt;Github and Pelican (free hosting) :&lt;/h2&gt;
&lt;p&gt;So I won't go into much detail on what is &lt;a class="reference external" href="http://www.github.com"&gt;github&lt;/a&gt;  and how to completely use it since there is plenty of documentation in their site. I will simply tell you guys the basics you need. So you should take some time right now to register an account with them. But just before you leave three words: &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Distributed_revision_control"&gt;distributed revision control!&lt;/a&gt; So when you come back use the following commands in order to install &lt;a class="reference external" href="http://www.github.com"&gt;github&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ apt-get install git-core
&lt;/pre&gt;
&lt;p&gt;Then follow &lt;a class="reference external" href="https://help.github.com/articles/set-up-git"&gt;this&lt;/a&gt; little tutorial on how to perform the initial configuration on &lt;a class="reference external" href="http://www.github.com"&gt;github&lt;/a&gt;. Once you are done you can finally get started on your website:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://help.github.com/articles/create-a-repo"&gt;Create a new repository&lt;/a&gt; on github's website. You should name it &lt;em&gt;website.github.com&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Go back to your linux shell and create a new directory with the same name, &lt;em&gt;website.github.com&lt;/em&gt;. (Basically following the create a new repository guide linked above.) Or after you create your repository on the website write the following commands:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir website.github.com
$ cd website.github.com
$ git init #initialize repository
$ touch README.rst
$ nano README.rst #Or your favorite text editor (ie gedit, vi, etc)
$ #add some content in your README.rst file (ie &amp;quot;this is a website&amp;quot; )
$ git add . #add everything in the current folder
$ git commit -m &amp;quot;first commit&amp;quot; #local commit
$ git remote add origin https://github.com/username/website.github.com.git
$ git push origin master #uploads to the link above.
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
Ok, so you now are one step closer to becoming famous.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="quickstart-your-blog"&gt;
&lt;h2&gt;Quickstart your blog:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Now that you have everything set-up properly and you are in your &lt;em&gt;website.github.com&lt;/em&gt; folder in your linux shell, you can start using pelican. You can simply do:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pelican-quickstart
&lt;/pre&gt;
&lt;p&gt;Sit down and robotically answer the questions! This will generate your configuration file in the current folder. After you are done answering the questions you can simply run the following commands to generate your website and upload it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pelican . -o . -s pelican.conf.py  #this generates the website using your settings
$ git add .
$ git commit -m &amp;quot;I just generate my website!&amp;quot;
$ git push
&lt;/pre&gt;
&lt;p&gt;So we are done. It may take some time but you can simply just go to website.github.com from your browser and your website should be up and running!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="organizing-your-posts"&gt;
&lt;h2&gt;Organizing your posts:&lt;/h2&gt;
&lt;p&gt;You can look at the structure of &lt;a class="reference external" href="https://github.com/rsegebre/rsegebre.github.com"&gt;my website&lt;/a&gt;. I simply used three folders, one for my posts, pages and static content. You can add a new post by simply doing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ touch post1.rst
$ nano post1.rst
&lt;/pre&gt;
&lt;p&gt;and write something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Title to display on post:
=========================

:date: 2012-06-22
:author: Roberto Segebre
:tags: blog, pelican, github, etc
:category: blog

This is a post on how to suceed in life... Blah blah..
&lt;/pre&gt;
&lt;p&gt;Save it and run the last four commands in the section above (pelican, add, commit, push), you can do this every time you do a change to your website and it should get updated in a couple minutes. A very cool &lt;a class="reference external" href="http://rst.ninjs.org/"&gt;WYSIWYG text editor&lt;/a&gt; for Restructured Text files (.rst files) is the one I am currently using to write this post. It is pretty sweet and you can also download the source code and simply run it on a local server, so you don't really need internet to write yours posts. The other markup language you can use is markdown (.md files) and there is also a really cool text editor for windows made by the &lt;a class="reference external" href="http://code52.org/"&gt;code52&lt;/a&gt; open source community, it is called &lt;a class="reference external" href="http://code52.org/DownmarkerWPF/"&gt;markpad&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So with this I conclude the post. I will have another post later on on how to change your domain name on your &lt;a class="reference external" href="http://pages.github.com/"&gt;github page&lt;/a&gt;. (But you will have to spend some money on your domain name.) Note that all of this can be done free of charge, you don't need to pay for hosting or anything like that, and you get a lot of flexibility in terms of you can do with it, like embedding an &lt;a class="reference external" href="http://rsegebre.com/static/simple_database/appletloader.html"&gt;applet&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I hope you were able to follow through this long and painful guide! Remember parts of this guide have lots of resources, I just wanted to have a guide that takes you from scratch to an end-product. If you any questions or comments please post below.&lt;/p&gt;
&lt;p&gt;~rs&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Segebre</dc:creator><pubDate>Fri, 22 Jun 2012 00:00:00 -0400</pubDate><guid>tag:rsegebre.com,2012-06-22:setting-up-your-github-website.html</guid><category>blog</category><category>website</category><category>pelican</category><category>python</category><category>github</category></item><item><title>New Blog/Website</title><link>http://rsegebre.com/new-blogwebsite.html</link><description>&lt;p&gt;This is my first attempt to setup my new personal website/blog following pydanny's steps.&lt;/p&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update:&lt;/h2&gt;
&lt;p&gt;2012-06-13&lt;/p&gt;
&lt;p&gt;So after a couple of days of playing around I am finally getting used to this,
also if you've never used &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReST&lt;/a&gt; or &lt;a class="reference external" href="http://www.latex-project.org"&gt;Latex&lt;/a&gt;, it might be somewhat annoying.
But the basics are not that hard to learn!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Segebre</dc:creator><pubDate>Mon, 11 Jun 2012 00:00:00 -0400</pubDate><guid>tag:rsegebre.com,2012-06-11:new-blogwebsite.html</guid><category>blog</category><category>pydanny</category><category>website</category></item><item><title>Welcome!</title><link>http://rsegebre.com/welcome.html</link><description>&lt;p&gt;So now that is summer and I just graduated, I realize I finally
have enough time to get a website rolling. So I starting looking
into what simple blog engine that allows for quite some modification
and custom themes. So I came across &lt;a class="reference external" href="http://pelican.notmyidea.org"&gt;Pelican&lt;/a&gt; after going through some
static blog generators, and coming across &lt;a class="reference external" href="http://pydanny.com"&gt;Pydanny&lt;/a&gt;'s Website, I decided
on Pelican. Yeah if you click on pydanny's website you'll see that they basically
look exactly the same. That is because I just followed his as a template
and we are both using the same pelican theme. Also Pydanny's website contains
a good article on all the different &lt;a class="reference external" href="http://pydanny.com/choosing-a-new-python-based-blog-engine.html"&gt;static blog generators&lt;/a&gt; and how to run your &lt;a class="reference external" href="http://pydanny.com/my-new-blog.html"&gt;own
pelican website&lt;/a&gt; if you are interested!&lt;/p&gt;
&lt;p&gt;After getting something decent going on in my own lil virtual box, I went to
try and deploy it. Which I knew would be the most annoying phase, since you have to
deal with various elements. Such as: your registrar, creating A records, waiting
for DNS servers to update and countless hours googling. But it
payed off, I will write a guide later on about how to roll your own Pelican website using github for free! (unless you want to have your own domain name)&lt;/p&gt;
&lt;p&gt;~rs&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Segebre</dc:creator><pubDate>Mon, 11 Jun 2012 00:00:00 -0400</pubDate><guid>tag:rsegebre.com,2012-06-11:welcome.html</guid><category>blog</category><category>pydanny</category><category>pelican</category><category>website</category></item></channel></rss>